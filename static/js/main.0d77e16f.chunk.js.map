{"version":3,"sources":["actions/types.js","reducers/auth.js","reducers/message.js","reducers/index.js","store.js","services/auth.service.js","components/login.component.js","actions/auth.js","components/register.component.js","services/auth-header.js","services/user.service.js","components/home.component.js","components/profile.component.js","components/board-user.component.js","components/board-moderator.component.js","components/board-admin.component.js","helpers/history.js","App.js","actions/message.js","serviceWorker.js","index.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","CLEAR_MESSAGE","user","JSON","parse","localStorage","getItem","initialState","isLoggedIn","combineReducers","auth","state","action","type","payload","message","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","API_URL","process","email","password","axios","post","then","response","data","accessToken","setItem","stringify","removeItem","required","value","className","role","Login","props","handleLogin","bind","onChangeEmail","onChangePassword","loading","e","this","setState","target","preventDefault","form","validateAll","dispatch","history","checkBtn","context","_errors","length","AuthService","login","Promise","resolve","error","toString","reject","push","window","location","reload","catch","to","src","alt","onSubmit","ref","c","htmlFor","name","onChange","validations","disabled","style","display","Component","connect","isEmail","vpassword","Register","handleRegister","successful","register","authHeader","Authorization","console","log","get","headers","Home","h1","body","UserService","getPublicContent","Profile","currentUser","substring","substr","id","roles","map","index","BoardUser","content","getUserBoard","BoardModerator","getModeratorBoard","BoardAdmin","getAdminBoard","createBrowserHistory","App","logOut","showModeratorBoard","showAdminBoard","undefined","listen","includes","logout","href","onClick","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kMAAaA,EAAmB,mBACnBC,EAAgB,gBAChBC,EAAgB,gBAChBC,EAAa,aACbC,EAAS,SAETC,EAAc,cACdC,EAAgB,gBCCvBC,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,SAEvCC,EAAeL,EACjB,CAAEM,YAAY,EAAMN,QACpB,CAAEM,YAAY,EAAON,KAAM,MCVzBK,EAAe,GCENE,4BAAgB,CAC7BC,KFUa,WAAyC,IAA/BC,EAA8B,uDAAtBJ,EAAcK,EAAQ,uCAC7CC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEd,OAAQD,GACN,KAAKlB,EAKL,KAAKC,EACH,OAAO,2BACFe,GADL,IAEEH,YAAY,IAEhB,KAAKX,EACH,OAAO,2BACFc,GADL,IAEEH,YAAY,EACZN,KAAMY,EAAQZ,OAElB,KAAKJ,EAML,KAAKC,EACH,OAAO,2BACFY,GADL,IAEEH,YAAY,EACZN,KAAM,OAEV,QACE,OAAOS,IE1CXI,QDDa,WAAyC,IAA/BJ,EAA8B,uDAAtBJ,EAAcK,EAAQ,uCAC7CC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAEd,OAAQD,GACN,KAAKb,EACH,MAAO,CAAEe,QAASD,GAEpB,KAAKb,EACH,MAAO,CAAEc,QAAS,IAEpB,QACE,OAAOJ,MEXPK,EAAa,CAACC,KAOLC,EALDC,sBACZC,EACAC,8BAAoBC,kBAAe,WAAf,EAAmBN,K,qICPnCO,EAAUC,0BA2BD,M,8FAxBPC,EAAOC,GACX,OAAOC,IACJC,KAAKL,EAAU,SAAU,CAAEE,QAAOC,aAClCG,MAAK,SAACC,GAKL,OAJIA,EAASC,KAAKC,aAChB3B,aAAa4B,QAAQ,OAAQ9B,KAAK+B,UAAUJ,EAASC,OAGhDD,EAASC,U,+BAKpB1B,aAAa8B,WAAW,U,+BAGjBV,EAAOC,GACd,OAAOC,IAAMC,KAAKL,EAAU,SAAU,CACpCE,QACAC,iB,MCdAU,EAAW,SAACC,GAChB,IAAKA,EACH,OACE,qBAAKC,UAAU,qBAAqBC,KAAK,QAAzC,sCAOAC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBAExB,EAAKhC,MAAQ,CACXc,MAAO,GACPC,SAAU,GACVoB,SAAS,GATM,E,0DAaLC,GACZC,KAAKC,SAAS,CACZxB,MAAOsB,EAAEG,OAAOb,U,uCAIHU,GACfC,KAAKC,SAAS,CACZvB,SAAUqB,EAAEG,OAAOb,U,kCAIXU,GAAI,IAAD,OACbA,EAAEI,iBAEFH,KAAKC,SAAS,CACZH,SAAS,IAGXE,KAAKI,KAAKC,cAPG,ICCK5B,EAAOC,EDDZ,EASiBsB,KAAKP,MAA3Ba,EATK,EASLA,SAAUC,EATL,EASKA,QAE2B,IAAzCP,KAAKQ,SAASC,QAAQC,QAAQC,OAChCL,GCXgB7B,EDWDuB,KAAKrC,MAAMc,MCXHC,EDWUsB,KAAKrC,MAAMe,SCXR,SAAC4B,GACzC,OAAOM,EAAYC,MAAMpC,EAAOC,GAAUG,MACxC,SAACE,GAMC,OALAuB,EAAS,CACPzC,KAAMhB,EACNiB,QAAS,CAAEZ,KAAM6B,KAGZ+B,QAAQC,aAEjB,SAACC,GACC,IAAMjD,EACHiD,EAAMlC,UACLkC,EAAMlC,SAASC,MACfiC,EAAMlC,SAASC,KAAKhB,SACtBiD,EAAMjD,SACNiD,EAAMC,WAWR,OATAX,EAAS,CACPzC,KAAMf,IAGRwD,EAAS,CACPzC,KAAMb,EACNc,QAASC,IAGJ+C,QAAQI,eDfZrC,MAAK,WACJ0B,EAAQY,KAAK,YACbC,OAAOC,SAASC,YAEjBC,OAAM,WACL,EAAKtB,SAAS,CACZH,SAAS,OAIfE,KAAKC,SAAS,CACZH,SAAS,M,+BAKL,IAAD,SACyBE,KAAKP,MAA7BjC,EADD,EACCA,WAAYO,EADb,EACaA,QAEpB,OAAIP,EACK,cAAC,IAAD,CAAUgE,GAAG,aAIpB,qBAAKlC,UAAU,YAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,qBACEmC,IAAI,8CACJC,IAAI,cACJpC,UAAU,qBAGZ,eAAC,IAAD,CACEqC,SAAU3B,KAAKN,YACfkC,IAAK,SAACC,GACJ,EAAKzB,KAAOyB,GAHhB,UAME,sBAAKvC,UAAU,aAAf,UACE,uBAAOwC,QAAQ,QAAf,mBACA,cAAC,IAAD,CACEjE,KAAK,OACLyB,UAAU,eACVyC,KAAK,QACL1C,MAAOW,KAAKrC,MAAMc,MAClBuD,SAAUhC,KAAKJ,cACfqC,YAAa,CAAC7C,QAIlB,sBAAKE,UAAU,aAAf,UACE,uBAAOwC,QAAQ,WAAf,sBACA,cAAC,IAAD,CACEjE,KAAK,WACLyB,UAAU,eACVyC,KAAK,WACL1C,MAAOW,KAAKrC,MAAMe,SAClBsD,SAAUhC,KAAKH,iBACfoC,YAAa,CAAC7C,QAIlB,qBAAKE,UAAU,aAAf,SACE,yBACEA,UAAU,4BACV4C,SAAUlC,KAAKrC,MAAMmC,QAFvB,UAIGE,KAAKrC,MAAMmC,SACV,sBAAMR,UAAU,qCAElB,8CAIHvB,GACC,qBAAKuB,UAAU,aAAf,SACE,qBAAKA,UAAU,qBAAqBC,KAAK,QAAzC,SACGxB,MAIP,cAAC,IAAD,CACEoE,MAAO,CAAEC,QAAS,QAClBR,IAAK,SAACC,GACJ,EAAKrB,SAAWqB,iB,GA3HZQ,aA8ILC,mBATf,SAAyB3E,GAGvB,MAAO,CACLH,WAHqBG,EAAMD,KAArBF,WAINO,QAHkBJ,EAAMI,QAAlBA,WAOKuE,CAAyB9C,G,QEzJlCJ,EAAW,SAACC,GAChB,IAAKA,EACH,OACE,qBAAKC,UAAU,qBAAqBC,KAAK,QAAzC,sCAOAd,EAAQ,SAACY,GACb,IAAKkD,kBAAQlD,GACX,OACE,qBAAKC,UAAU,qBAAqBC,KAAK,QAAzC,yCAOAiD,EAAY,SAACnD,GACjB,GAAIA,EAAMsB,OAAS,GAAKtB,EAAMsB,OAAS,GACrC,OACE,qBAAKrB,UAAU,qBAAqBC,KAAK,QAAzC,gEAOAkD,E,kDACJ,WAAYhD,GAAQ,IAAD,8BACjB,cAAMA,IACDiD,eAAiB,EAAKA,eAAe/C,KAApB,gBACtB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBAExB,EAAKhC,MAAQ,CACXc,MAAO,GACPC,SAAU,GACViE,YAAY,GATG,E,0DAaL5C,GACZC,KAAKC,SAAS,CACZxB,MAAOsB,EAAEG,OAAOb,U,uCAIHU,GACfC,KAAKC,SAAS,CACZvB,SAAUqB,EAAEG,OAAOb,U,qCAIRU,GAAI,IDtDItB,EAAOC,ECsDZ,OAChBqB,EAAEI,iBAEFH,KAAKC,SAAS,CACZ0C,YAAY,IAGd3C,KAAKI,KAAKC,cAEmC,IAAzCL,KAAKQ,SAASC,QAAQC,QAAQC,QAChCX,KAAKP,MACFa,UDjEgB7B,ECkENuB,KAAKrC,MAAMc,MDlEEC,ECkEKsB,KAAKrC,MAAMe,SDlEH,SAAC4B,GAC5C,OAAOM,EAAYgC,SAASnE,EAAOC,GAAUG,MAC3C,SAACC,GAUC,OATAwB,EAAS,CACPzC,KAAMlB,IAGR2D,EAAS,CACPzC,KAAMb,EACNc,QAASgB,EAASC,KAAKhB,UAGlB+C,QAAQC,aAEjB,SAACC,GACC,IAAMjD,EACHiD,EAAMlC,UACLkC,EAAMlC,SAASC,MACfiC,EAAMlC,SAASC,KAAKhB,SACtBiD,EAAMjD,SACNiD,EAAMC,WAWR,OATAX,EAAS,CACPzC,KAAMjB,IAGR0D,EAAS,CACPzC,KAAMb,EACNc,QAASC,IAGJ+C,QAAQI,eCqCZrC,MAAK,WACJ,EAAKoB,SAAS,CACZ0C,YAAY,OAGfpB,OAAM,WACL,EAAKtB,SAAS,CACZ0C,YAAY,S,+BAMZ,IAAD,OACC5E,EAAYiC,KAAKP,MAAjB1B,QAER,OACE,qBAAKuB,UAAU,YAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,qBACEmC,IAAI,8CACJC,IAAI,cACJpC,UAAU,qBAGZ,eAAC,IAAD,CACEqC,SAAU3B,KAAK0C,eACfd,IAAK,SAACC,GACJ,EAAKzB,KAAOyB,GAHhB,WAMI7B,KAAKrC,MAAMgF,YACX,gCACE,sBAAKrD,UAAU,aAAf,UACE,uBAAOwC,QAAQ,QAAf,mBACA,cAAC,IAAD,CACEjE,KAAK,OACLyB,UAAU,eACVyC,KAAK,QACL1C,MAAOW,KAAKrC,MAAMc,MAClBuD,SAAUhC,KAAKJ,cACfqC,YAAa,CAAC7C,EAAUX,QAI5B,sBAAKa,UAAU,aAAf,UACE,uBAAOwC,QAAQ,WAAf,sBACA,cAAC,IAAD,CACEjE,KAAK,WACLyB,UAAU,eACVyC,KAAK,WACL1C,MAAOW,KAAKrC,MAAMe,SAClBsD,SAAUhC,KAAKH,iBACfoC,YAAa,CAAC7C,EAAUoD,QAI5B,qBAAKlD,UAAU,aAAf,SACE,wBAAQA,UAAU,4BAAlB,0BAKLvB,GACC,qBAAKuB,UAAU,aAAf,SACE,qBAAKA,UAAYU,KAAKrC,MAAMgF,WAAa,sBAAwB,qBAAuBpD,KAAK,QAA7F,SACGxB,MAIP,cAAC,IAAD,CACEoE,MAAO,CAAEC,QAAS,QAClBR,IAAK,SAACC,GACJ,EAAKrB,SAAWqB,iB,GAjHTQ,aAkIRC,mBAPf,SAAyB3E,GAEvB,MAAO,CACLI,QAFkBJ,EAAMI,QAAlBA,WAMKuE,CAAyBG,GCzKzB,SAASI,IACtB,IAAM3F,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,SAE7C,OAAIJ,GAAQA,EAAK8B,YACR,CAAE8D,cAAe,UAAY5F,EAAK8B,aAElC,GCHX,IAAMT,EAAUC,0BAqBD,M,2GAhBX,OADAuE,QAAQC,IAAIzE,EAAU,qBACfI,IAAMsE,IAAI1E,EAAU,uB,qCAI3B,OAAOI,IAAMsE,IAAI1E,EAAU,OAAQ,CAAE2E,QAASL,Q,0CAI9C,OAAOlE,IAAMsE,IAAI1E,EAAU,MAAO,CAAE2E,QAASL,Q,sCAI7C,OAAOlE,IAAMsE,IAAI1E,EAAU,QAAS,CAAE2E,QAASL,U,MChB9BM,G,kDACnB,WAAY1D,GAAQ,IAAD,8BACjB,cAAMA,IAED9B,MAAQ,CACXyF,GAAI,GACJC,KAAM,IALS,E,gEASE,IAAD,OAClBC,EAAYC,mBAAmB1E,MAC7B,SAAAC,GACE,EAAKmB,SAAS,CACZmD,GAAItE,EAASC,KAAKqE,GAClBC,KAAMvE,EAASC,KAAKsE,UAGxB,SAAArC,GACE,EAAKf,SAAS,CACZmD,GAAI,gBACJC,KACGrC,EAAMlC,UAAYkC,EAAMlC,SAASC,MAClCiC,EAAMjD,SACNiD,EAAMC,kB,+BAOd,OACE,qBAAK3B,UAAU,YAAf,SACE,yBAAQA,UAAU,YAAlB,UACE,6BAAKU,KAAKrC,MAAMyF,KAChB,4BAAIpD,KAAKrC,MAAM0F,gB,GAnCShB,aCA5BmB,G,uKAEM,IACMC,EAAgBzD,KAAKP,MAA3BvC,KAER,OAAKuG,EAKH,sBAAKnE,UAAU,YAAf,UACE,wBAAQA,UAAU,YAAlB,SACE,+BACE,4CADF,IAC2BmE,EAAYhF,WAGzC,8BACE,4CADF,IAC2BgF,EAAYzE,YAAY0E,UAAU,EAAG,IADhE,OACyE,IACtED,EAAYzE,YAAY2E,OAAOF,EAAYzE,YAAY2B,OAAS,OAEnE,8BACE,yCADF,IACwB8C,EAAYG,MAEpC,kDACA,6BACGH,EAAYI,OACXJ,EAAYI,MAAMC,KAAI,SAACvE,EAAMwE,GAAP,OAAiB,6BAAiBxE,GAARwE,WApB/C,cAAC,IAAD,CAAUvC,GAAG,e,GANJa,aAwCPC,oBAPf,SAAyB3E,GAEvB,MAAO,CACLT,KAFeS,EAAMD,KAAfR,QAMKoF,CAAyBkB,ICxCnBQ,G,kDACnB,WAAYvE,GAAQ,IAAD,8BACjB,cAAMA,IAED9B,MAAQ,CACXsG,QAAS,IAJM,E,gEAQE,IAAD,OAClBX,EAAYY,eAAerF,MACzB,SAAAC,GACE,EAAKmB,SAAS,CACZgE,QAASnF,EAASC,UAGtB,SAAAiC,GACE,EAAKf,SAAS,CACZgE,QACGjD,EAAMlC,UACLkC,EAAMlC,SAASC,MACfiC,EAAMlC,SAASC,KAAKhB,SACtBiD,EAAMjD,SACNiD,EAAMC,kB,+BAOd,OACE,qBAAK3B,UAAU,YAAf,SACE,wBAAQA,UAAU,YAAlB,SACE,6BAAKU,KAAKrC,MAAMsG,kB,GAjCa5B,aCAlB8B,G,kDACnB,WAAY1E,GAAQ,IAAD,8BACjB,cAAMA,IAED9B,MAAQ,CACXsG,QAAS,IAJM,E,gEAQE,IAAD,OAClBX,EAAYc,oBAAoBvF,MAC9B,SAAAC,GACE,EAAKmB,SAAS,CACZgE,QAASnF,EAASC,UAGtB,SAAAiC,GACE,EAAKf,SAAS,CACZgE,QACGjD,EAAMlC,UACLkC,EAAMlC,SAASC,MACfiC,EAAMlC,SAASC,KAAKhB,SACtBiD,EAAMjD,SACNiD,EAAMC,kB,+BAOd,OACE,qBAAK3B,UAAU,YAAf,SACE,wBAAQA,UAAU,YAAlB,SACE,6BAAKU,KAAKrC,MAAMsG,kB,GAjCkB5B,aCAvBgC,G,kDACnB,WAAY5E,GAAQ,IAAD,8BACjB,cAAMA,IAED9B,MAAQ,CACXsG,QAAS,IAJM,E,gEAQE,IAAD,OAClBX,EAAYgB,gBAAgBzF,MAC1B,SAAAC,GACE,EAAKmB,SAAS,CACZgE,QAASnF,EAASC,UAGtB,SAAAiC,GACE,EAAKf,SAAS,CACZgE,QACGjD,EAAMlC,UACLkC,EAAMlC,SAASC,MACfiC,EAAMlC,SAASC,KAAKhB,SACtBiD,EAAMjD,SACNiD,EAAMC,kB,+BAOd,OACE,qBAAK3B,UAAU,YAAf,SACE,wBAAQA,UAAU,YAAlB,SACE,6BAAKU,KAAKrC,MAAMsG,kB,GAjCc5B,a,QCF3B9B,GAAUgE,eCkBjBC,G,kDACJ,WAAY/E,GAAQ,IAAD,8BACjB,cAAMA,IACDgF,OAAS,EAAKA,OAAO9E,KAAZ,gBAEd,EAAKhC,MAAQ,CACX+G,oBAAoB,EACpBC,gBAAgB,EAChBlB,iBAAamB,GAGfrE,GAAQsE,QAAO,SAACxD,GACd5B,EAAMa,SCzBuB,CACjCzC,KAAMZ,ODaa,E,gEAgBjB,IAAMC,EAAO8C,KAAKP,MAAMvC,KAEpBA,GACF8C,KAAKC,SAAS,CACZwD,YAAavG,EACbwH,mBAAoBxH,EAAK2G,MAAMiB,SAAS,kBACxCH,eAAgBzH,EAAK2G,MAAMiB,SAAS,kB,+BAMxC9E,KAAKP,MAAMa,UV8Ba,SAACA,GAC3BM,EAAYmE,SAEZzE,EAAS,CACPzC,KAAMd,S,+BU/BE,IAAD,EACqDiD,KAAKrC,MAAzD8F,EADD,EACCA,YAAaiB,EADd,EACcA,mBAAoBC,EADlC,EACkCA,eAEzC,OACE,cAAC,IAAD,CAAQpE,QAASA,GAAjB,SACE,gCACE,sBAAKjB,UAAU,2CAAf,UACE,cAAC,IAAD,CAAMkC,GAAI,IAAKlC,UAAU,eAAzB,wBAGA,sBAAKA,UAAU,qBAAf,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMkC,GAAI,QAASlC,UAAU,WAA7B,oBAKDoF,GACC,oBAAIpF,UAAU,WAAd,SACE,cAAC,IAAD,CAAMkC,GAAI,OAAQlC,UAAU,WAA5B,+BAMHqF,GACC,oBAAIrF,UAAU,WAAd,SACE,cAAC,IAAD,CAAMkC,GAAI,SAAUlC,UAAU,WAA9B,2BAMHmE,GACC,oBAAInE,UAAU,WAAd,SACE,cAAC,IAAD,CAAMkC,GAAI,QAASlC,UAAU,WAA7B,uBAOLmE,EACC,sBAAKnE,UAAU,qBAAf,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMkC,GAAI,WAAYlC,UAAU,WAAhC,SACGmE,EAAYhF,UAGjB,oBAAIa,UAAU,WAAd,SACE,mBAAG0F,KAAK,SAAS1F,UAAU,WAAW2F,QAASjF,KAAKyE,OAApD,yBAMJ,sBAAKnF,UAAU,qBAAf,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMkC,GAAI,SAAUlC,UAAU,WAA9B,qBAKF,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMkC,GAAI,YAAalC,UAAU,WAAjC,6BAQR,qBAAKA,UAAU,iBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO4F,OAAK,EAACC,KAAM,CAAC,IAAK,SAAUC,UAAWjC,KAC9C,cAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,SAASC,UAAW5F,IACtC,cAAC,IAAD,CAAO0F,OAAK,EAACC,KAAK,YAAYC,UAAW3C,IACzC,cAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,WAAWC,UAAW5B,KACxC,cAAC,IAAD,CAAO2B,KAAK,QAAQC,UAAWpB,KAC/B,cAAC,IAAD,CAAOmB,KAAK,OAAOC,UAAWjB,KAC9B,cAAC,IAAD,CAAOgB,KAAK,SAASC,UAAWf,mB,GAhH5BhC,aAgIHC,oBAPf,SAAyB3E,GAEvB,MAAO,CACLT,KAFeS,EAAMD,KAAfR,QAMKoF,CAAyBkC,IExIpBa,QACW,cAA7BjE,OAAOC,SAASiE,UAEa,UAA7BlE,OAAOC,SAASiE,UAEhBlE,OAAOC,SAASiE,SAASC,MACvB,2DCXJC,IAASC,OACP,cAAC,IAAD,CAAUvH,MAAOA,EAAjB,SACE,cAAC,GAAD,MAEFwH,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjH,MAAK,SAAAkH,GACJA,EAAaC,gBAEdzE,OAAM,SAAAP,GACL+B,QAAQ/B,MAAMA,EAAMjD,a","file":"static/js/main.0d77e16f.chunk.js","sourcesContent":["export const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT = \"LOGOUT\";\n\nexport const SET_MESSAGE = \"SET_MESSAGE\";\nexport const CLEAR_MESSAGE = \"CLEAR_MESSAGE\";\n","import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n} from \"../actions/types\";\n\nconst user = JSON.parse(localStorage.getItem(\"user\"));\n\nconst initialState = user\n  ? { isLoggedIn: true, user }\n  : { isLoggedIn: false, user: null };\n\n// eslint-disable-next-line\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case REGISTER_SUCCESS:\n      return {\n        ...state,\n        isLoggedIn: false,\n      };\n    case REGISTER_FAIL:\n      return {\n        ...state,\n        isLoggedIn: false,\n      };\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        isLoggedIn: true,\n        user: payload.user,\n      };\n    case LOGIN_FAIL:\n      return {\n        ...state,\n        isLoggedIn: false,\n        user: null,\n      };\n    case LOGOUT:\n      return {\n        ...state,\n        isLoggedIn: false,\n        user: null,\n      };\n    default:\n      return state;\n  }\n}\n","import { SET_MESSAGE, CLEAR_MESSAGE } from \"../actions/types\";\n\nconst initialState = {};\n\n// eslint-disable-next-line\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case SET_MESSAGE:\n      return { message: payload };\n\n    case CLEAR_MESSAGE:\n      return { message: \"\" };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport auth from \"./auth\";\nimport message from \"./message\";\n\nexport default combineReducers({\n  auth,\n  message,\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import axios from \"axios\";\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nclass AuthService {\n  login(email, password) {\n    return axios\n      .post(API_URL + \"signin\", { email, password })\n      .then((response) => {\n        if (response.data.accessToken) {\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\n        }\n\n        return response.data;\n      });\n  }\n\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n\n  register(email, password) {\n    return axios.post(API_URL + \"signup\", {\n      email,\n      password,\n    });\n  }\n}\n\nexport default new AuthService();\n","import React, { Component } from \"react\";\nimport { Redirect } from 'react-router-dom';\n\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\n\nimport { connect } from \"react-redux\";\nimport { login } from \"../actions/auth\";\n\nconst required = (value) => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This field is required!\n      </div>\n    );\n  }\n};\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n      loading: false,\n    };\n  }\n\n  onChangeEmail(e) {\n    this.setState({\n      email: e.target.value,\n    });\n  }\n\n  onChangePassword(e) {\n    this.setState({\n      password: e.target.value,\n    });\n  }\n\n  handleLogin(e) {\n    e.preventDefault();\n\n    this.setState({\n      loading: true,\n    });\n\n    this.form.validateAll();\n\n    const { dispatch, history } = this.props;\n\n    if (this.checkBtn.context._errors.length === 0) {\n      dispatch(login(this.state.email, this.state.password))\n        .then(() => {\n          history.push(\"/profile\");\n          window.location.reload();\n        })\n        .catch(() => {\n          this.setState({\n            loading: false\n          });\n        });\n    } else {\n      this.setState({\n        loading: false,\n      });\n    }\n  }\n\n  render() {\n    const { isLoggedIn, message } = this.props;\n\n    if (isLoggedIn) {\n      return <Redirect to=\"/profile\" />;\n    }\n\n    return (\n      <div className=\"col-md-12\">\n        <div className=\"card card-container\">\n          <img\n            src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n            alt=\"profile-img\"\n            className=\"profile-img-card\"\n          />\n\n          <Form\n            onSubmit={this.handleLogin}\n            ref={(c) => {\n              this.form = c;\n            }}\n          >\n            <div className=\"form-group\">\n              <label htmlFor=\"Email\">Email</label>\n              <Input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"email\"\n                value={this.state.email}\n                onChange={this.onChangeEmail}\n                validations={[required]}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">Password</label>\n              <Input\n                type=\"password\"\n                className=\"form-control\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.onChangePassword}\n                validations={[required]}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <button\n                className=\"btn btn-primary btn-block\"\n                disabled={this.state.loading}\n              >\n                {this.state.loading && (\n                  <span className=\"spinner-border spinner-border-sm\"></span>\n                )}\n                <span>Login</span>\n              </button>\n            </div>\n\n            {message && (\n              <div className=\"form-group\">\n                <div className=\"alert alert-danger\" role=\"alert\">\n                  {message}\n                </div>\n              </div>\n            )}\n            <CheckButton\n              style={{ display: \"none\" }}\n              ref={(c) => {\n                this.checkBtn = c;\n              }}\n            />\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { isLoggedIn } = state.auth;\n  const { message } = state.message;\n  return {\n    isLoggedIn,\n    message\n  };\n}\n\nexport default connect(mapStateToProps)(Login);\n","import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  SET_MESSAGE,\n} from \"./types\";\n\nimport AuthService from \"../services/auth.service\";\n\nexport const register = (email, password) => (dispatch) => {\n  return AuthService.register(email, password).then(\n    (response) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const login = (email, password) => (dispatch) => {\n  return AuthService.login(email, password).then(\n    (data) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { user: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n};\n","import React, { Component } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport { isEmail } from \"validator\";\n\nimport { connect } from \"react-redux\";\nimport { register } from \"../actions/auth\";\n\nconst required = (value) => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This field is required!\n      </div>\n    );\n  }\n};\n\nconst email = (value) => {\n  if (!isEmail(value)) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This is not a valid email.\n      </div>\n    );\n  }\n};\n\nconst vpassword = (value) => {\n  if (value.length < 6 || value.length > 40) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        The password must be between 6 and 40 characters.\n      </div>\n    );\n  }\n};\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n    this.handleRegister = this.handleRegister.bind(this);\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n      successful: false,\n    };\n  }\n\n  onChangeEmail(e) {\n    this.setState({\n      email: e.target.value,\n    });\n  }\n\n  onChangePassword(e) {\n    this.setState({\n      password: e.target.value,\n    });\n  }\n\n  handleRegister(e) {\n    e.preventDefault();\n\n    this.setState({\n      successful: false,\n    });\n\n    this.form.validateAll();\n\n    if (this.checkBtn.context._errors.length === 0) {\n      this.props\n        .dispatch(\n          register(this.state.email, this.state.password)\n        )\n        .then(() => {\n          this.setState({\n            successful: true,\n          });\n        })\n        .catch(() => {\n          this.setState({\n            successful: false,\n          });\n        });\n    }\n  }\n\n  render() {\n    const { message } = this.props;\n\n    return (\n      <div className=\"col-md-12\">\n        <div className=\"card card-container\">\n          <img\n            src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n            alt=\"profile-img\"\n            className=\"profile-img-card\"\n          />\n\n          <Form\n            onSubmit={this.handleRegister}\n            ref={(c) => {\n              this.form = c;\n            }}\n          >\n            {!this.state.successful && (\n              <div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Email</label>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"email\"\n                    value={this.state.email}\n                    onChange={this.onChangeEmail}\n                    validations={[required, email]}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Password</label>\n                  <Input\n                    type=\"password\"\n                    className=\"form-control\"\n                    name=\"password\"\n                    value={this.state.password}\n                    onChange={this.onChangePassword}\n                    validations={[required, vpassword]}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <button className=\"btn btn-primary btn-block\">Sign Up</button>\n                </div>\n              </div>\n            )}\n\n            {message && (\n              <div className=\"form-group\">\n                <div className={ this.state.successful ? \"alert alert-success\" : \"alert alert-danger\" } role=\"alert\">\n                  {message}\n                </div>\n              </div>\n            )}\n            <CheckButton\n              style={{ display: \"none\" }}\n              ref={(c) => {\n                this.checkBtn = c;\n              }}\n            />\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { message } = state.message;\n  return {\n    message,\n  };\n}\n\nexport default connect(mapStateToProps)(Register);\n","export default function authHeader() {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  if (user && user.accessToken) {\n    return { Authorization: 'Bearer ' + user.accessToken };\n  } else {\n    return {};\n  }\n}\n","import axios from 'axios';\nimport authHeader from './auth-header';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nclass UserService {\n  getPublicContent() {\n    console.log(API_URL + 'api/v1/home/index');\n    return axios.get(API_URL + 'api/v1/home/index');\n  }\n\n  getUserBoard() {\n    return axios.get(API_URL + 'user', { headers: authHeader() });\n  }\n\n  getModeratorBoard() {\n    return axios.get(API_URL + 'mod', { headers: authHeader() });\n  }\n\n  getAdminBoard() {\n    return axios.get(API_URL + 'admin', { headers: authHeader() });\n  }\n}\n\nexport default new UserService();\n","import React, { Component } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      h1: \"\",\n      body: \"\"\n    };\n  }\n\n  componentDidMount() {\n    UserService.getPublicContent().then(\n      response => {\n        this.setState({\n          h1: response.data.h1,\n          body: response.data.body\n        });\n      },\n      error => {\n        this.setState({\n          h1: 'Connect ERROR',\n          body:\n            (error.response && error.response.data) ||\n            error.message ||\n            error.toString()\n        });\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"jumbotron\">\n          <h1>{this.state.h1}</h1>\n          <p>{this.state.body}</p>\n        </header>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Redirect } from 'react-router-dom';\nimport { connect } from \"react-redux\";\n\nclass Profile extends Component {\n\n  render() {\n    const { user: currentUser } = this.props;\n\n    if (!currentUser) {\n      return <Redirect to=\"/login\" />;\n    }\n\n    return (\n      <div className=\"container\">\n        <header className=\"jumbotron\">\n          <h3>\n            <strong>Email:</strong> {currentUser.email}\n          </h3>\n        </header>\n        <p>\n          <strong>Token:</strong> {currentUser.accessToken.substring(0, 20)} ...{\" \"}\n          {currentUser.accessToken.substr(currentUser.accessToken.length - 20)}\n        </p>\n        <p>\n          <strong>Id:</strong> {currentUser.id}\n        </p>\n        <strong>Authorities:</strong>\n        <ul>\n          {currentUser.roles &&\n            currentUser.roles.map((role, index) => <li key={index}>{role}</li>)}\n        </ul>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { user } = state.auth;\n  return {\n    user,\n  };\n}\n\nexport default connect(mapStateToProps)(Profile);\n","import React, { Component } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nexport default class BoardUser extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      content: \"\"\n    };\n  }\n\n  componentDidMount() {\n    UserService.getUserBoard().then(\n      response => {\n        this.setState({\n          content: response.data\n        });\n      },\n      error => {\n        this.setState({\n          content:\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString()\n        });\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"jumbotron\">\n          <h3>{this.state.content}</h3>\n        </header>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nexport default class BoardModerator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      content: \"\"\n    };\n  }\n\n  componentDidMount() {\n    UserService.getModeratorBoard().then(\n      response => {\n        this.setState({\n          content: response.data\n        });\n      },\n      error => {\n        this.setState({\n          content:\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString()\n        });\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"jumbotron\">\n          <h3>{this.state.content}</h3>\n        </header>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nexport default class BoardAdmin extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      content: \"\"\n    };\n  }\n\n  componentDidMount() {\n    UserService.getAdminBoard().then(\n      response => {\n        this.setState({\n          content: response.data\n        });\n      },\n      error => {\n        this.setState({\n          content:\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString()\n        });\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"jumbotron\">\n          <h3>{this.state.content}</h3>\n        </header>\n      </div>\n    );\n  }\n}\n","import { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport Login from \"./components/login.component\";\nimport Register from \"./components/register.component\";\nimport Home from \"./components/home.component\";\nimport Profile from \"./components/profile.component\";\nimport BoardUser from \"./components/board-user.component\";\nimport BoardModerator from \"./components/board-moderator.component\";\nimport BoardAdmin from \"./components/board-admin.component\";\n\nimport { logout } from \"./actions/auth\";\nimport { clearMessage } from \"./actions/message\";\n\nimport { history } from './helpers/history';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.logOut = this.logOut.bind(this);\n\n    this.state = {\n      showModeratorBoard: false,\n      showAdminBoard: false,\n      currentUser: undefined,\n    };\n\n    history.listen((location) => {\n      props.dispatch(clearMessage()); // clear message when changing location\n    });\n  }\n\n  componentDidMount() {\n    const user = this.props.user;\n\n    if (user) {\n      this.setState({\n        currentUser: user,\n        showModeratorBoard: user.roles.includes(\"ROLE_MODERATOR\"),\n        showAdminBoard: user.roles.includes(\"ROLE_ADMIN\"),\n      });\n    }\n  }\n\n  logOut() {\n    this.props.dispatch(logout());\n  }\n\n  render() {\n    const { currentUser, showModeratorBoard, showAdminBoard } = this.state;\n\n    return (\n      <Router history={history}>\n        <div>\n          <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n            <Link to={\"/\"} className=\"navbar-brand\">\n              RABADAN.RU\n            </Link>\n            <div className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item\">\n                <Link to={\"/home\"} className=\"nav-link\">\n                  Home\n                </Link>\n              </li>\n\n              {showModeratorBoard && (\n                <li className=\"nav-item\">\n                  <Link to={\"/mod\"} className=\"nav-link\">\n                    Moderator Board\n                  </Link>\n                </li>\n              )}\n\n              {showAdminBoard && (\n                <li className=\"nav-item\">\n                  <Link to={\"/admin\"} className=\"nav-link\">\n                    Admin Board\n                  </Link>\n                </li>\n              )}\n\n              {currentUser && (\n                <li className=\"nav-item\">\n                  <Link to={\"/user\"} className=\"nav-link\">\n                    User\n                  </Link>\n                </li>\n              )}\n            </div>\n\n            {currentUser ? (\n              <div className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item\">\n                  <Link to={\"/profile\"} className=\"nav-link\">\n                    {currentUser.email}\n                  </Link>\n                </li>\n                <li className=\"nav-item\">\n                  <a href=\"/login\" className=\"nav-link\" onClick={this.logOut}>\n                    LogOut\n                  </a>\n                </li>\n              </div>\n            ) : (\n              <div className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item\">\n                  <Link to={\"/login\"} className=\"nav-link\">\n                    Login\n                  </Link>\n                </li>\n\n                <li className=\"nav-item\">\n                  <Link to={\"/register\"} className=\"nav-link\">\n                    Sign Up\n                  </Link>\n                </li>\n              </div>\n            )}\n          </nav>\n\n          <div className=\"container mt-3\">\n            <Switch>\n              <Route exact path={[\"/\", \"/home\"]} component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/register\" component={Register} />\n              <Route exact path=\"/profile\" component={Profile} />\n              <Route path=\"/user\" component={BoardUser} />\n              <Route path=\"/mod\" component={BoardModerator} />\n              <Route path=\"/admin\" component={BoardAdmin} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { user } = state.auth;\n  return {\n    user,\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","import { SET_MESSAGE, CLEAR_MESSAGE } from \"./types\";\n\nexport const setMessage = (message) => ({\n  type: SET_MESSAGE,\n  payload: message,\n});\n\nexport const clearMessage = () => ({\n  type: CLEAR_MESSAGE,\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can chađinge\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}